{"version":3,"sources":["../src/schema.js"],"names":["globalId","loaders","id","type","person","load","obj","hasOwnProperty","PersonType","nodeField","nodeInterface","GraphQLObjectType","name","description","fields","firstName","GraphQLString","resolve","first_name","lastName","last_name","fullName","console","log","email","username","friends","GraphQLList","args","loadManyByURL","interfaces","QueryType","allPeople","root","loadAll","node","GraphQLNonNull","GraphQLID","GraphQLSchema","query"],"mappings":"2EAAA,uC;AACA;;;;;;;;AAQA,6C;;;;;;;;;AASI;AACF;AACA,UAACA,QAAD,QAAyB,KAAbC,OAAa,QAAbA,OAAa;AACJ,kCAAaD,QAAb,CADI,CAChBE,EADgB,iBAChBA,EADgB,CACZC,IADY,iBACZA,IADY;AAEvB,MAAIA,SAAS,QAAb,EAAuB;AACrB,WAAOF,QAAQG,MAAR,CAAeC,IAAf,CAAoBH,EAApB,CAAP;AACD;AACF,CAPC;AAQF;AACA,UAACI,GAAD,EAAS;AACP,MAAIA,IAAIC,cAAJ,CAAmB,UAAnB,CAAJ,EAAoC;AAClC,WAAOC,UAAP;AACD;AACF,CAbC,C,CAFFC,S,oBAAAA,S,CACAC,a,oBAAAA,a;;;AAiBF,IAAMF,aAAa,IAAIG,0BAAJ,CAAsB;AACvCC,QAAM,QADiC;AAEvCC,eAAa,gCAF0B;AAGvCC,UAAQ,0BAAO;AACbZ,UAAI,iCAAc,QAAd,CADS;AAEba,iBAAW;AACTZ,cAAMa,sBADG;AAETH,qBAAa,qBAFJ;AAGTI,iBAAS,8BAAOX,IAAIY,UAAX,EAHA,EAFE;;AAObC,gBAAU;AACRhB,cAAMa,sBADE;AAERH,qBAAa,yCAFL;AAGRI,iBAAS,8BAAOX,IAAIc,SAAX,EAHD,EAPG;;AAYbC,gBAAU;AACRlB,cAAMa,sBADE;AAERH,qBAAa,iBAFL;AAGRI,iBAAS,sBAAO;AACdK,kBAAQC,GAAR,CAAejB,IAAIY,UAAnB,SAAiCZ,IAAIc,SAArC;AACA,iBAAUd,IAAIY,UAAd,SAA4BZ,IAAIc,SAAhC;AACD,SANO,EAZG;;AAoBbI,aAAO;AACLrB,cAAMa,sBADD;AAELH,qBAAa,yBAFR,EApBM;;AAwBbY,gBAAU;AACRtB,cAAMa,sBADE;AAERH,qBAAa,gBAFL,EAxBG;;AA4Bba,eAAS;AACPvB,cAAM,IAAIwB,oBAAJ,CAAgBnB,UAAhB,CADC;AAEPK,qBAAa,2BAFN;AAGPI,iBAAS,iBAACX,GAAD,EAAMsB,IAAN,cAAa3B,OAAb,SAAaA,OAAb;AACPA,oBAAQG,MAAR,CAAeyB,aAAf,CAA6BvB,IAAIoB,OAAjC,CADO,GAHF,EA5BI,EAAP,EAH+B;;;AAsCvCI,cAAY,CAACpB,aAAD,CAtC2B,EAAtB,CAAnB;;;AAyCA,IAAMqB,YAAY,IAAIpB,0BAAJ,CAAsB;AACtCC,QAAM,OADgC;AAEtCC,eAAa,4BAFyB;AAGtCC,UAAQ,0BAAO;AACbkB,iBAAW;AACT7B,cAAM,IAAIwB,oBAAJ,CAAgBnB,UAAhB,CADG;AAETK,qBAAa,sBAFJ;AAGTI,iBAAS,iBAACgB,IAAD,EAAOL,IAAP,cAAc3B,OAAd,SAAcA,OAAd,QAA2BA,QAAQG,MAAR,CAAe8B,OAAf,EAA3B,EAHA,EADE;;AAMbC,YAAM1B,SANO;AAObL,cAAQ;AACND,cAAMK,UADA;AAENoB,cAAM;AACJ1B,cAAI,EAACC,MAAM,IAAIiC,uBAAJ,CAAmBC,kBAAnB,CAAP,EADA,EAFA;;AAKNpB,iBAAS,iBAACgB,IAAD,EAAOL,IAAP,cAAc3B,OAAd,SAAcA,OAAd,QAA2BA,QAAQG,MAAR,CAAeC,IAAf,CAAoBuB,KAAK1B,EAAzB,CAA3B,EALH,EAPK,EAAP,EAH8B,EAAtB,CAAlB,C;;;;;AAoBe,IAAIoC,sBAAJ,CAAkB;AAC/BC,SAAOR,SADwB,EAAlB,C","file":"schema.js","sourcesContent":["import fetch from 'node-fetch';\nimport {\n  GraphQLID,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\nimport {\n  fromGlobalId,\n  globalIdField,\n  nodeDefinitions,\n} from 'graphql-relay';\n\nconst {\n  nodeField,\n  nodeInterface,\n} = nodeDefinitions(\n  // A method that maps from a global id to an object\n  (globalId, {loaders}) => {\n    const {id, type} = fromGlobalId(globalId);\n    if (type === 'Person') {\n      return loaders.person.load(id);\n    }\n  },\n  // A method that maps from an object to a type\n  (obj) => {\n    if (obj.hasOwnProperty('username')) {\n      return PersonType;\n    }\n  }\n);\n\nconst PersonType = new GraphQLObjectType({\n  name: 'Person',\n  description: 'Somebody that you used to know',\n  fields: () => ({\n    id: globalIdField('Person'),\n    firstName: {\n      type: GraphQLString,\n      description: 'What you yell at me',\n      resolve: obj => obj.first_name,\n    },\n    lastName: {\n      type: GraphQLString,\n      description: 'What you yell at me when I\\'ve been bad',\n      resolve: obj => obj.last_name,\n    },\n    fullName: {\n      type: GraphQLString,\n      description: 'A name sandwich',\n      resolve: obj => {\n        console.log(`${obj.first_name} ${obj.last_name}`)\n        return `${obj.first_name} ${obj.last_name}`\n      },\n    },\n    email: {\n      type: GraphQLString,\n      description: 'Where to send junk mail',\n    },\n    username: {\n      type: GraphQLString,\n      description: 'Log in as this',\n    },\n    friends: {\n      type: new GraphQLList(PersonType),\n      description: 'People who lent you money',\n      resolve: (obj, args, {loaders}) =>\n        loaders.person.loadManyByURL(obj.friends),\n    },\n  }),\n  interfaces: [nodeInterface],\n});\n\nconst QueryType = new GraphQLObjectType({\n  name: 'Query',\n  description: 'The root of all... queries',\n  fields: () => ({\n    allPeople: {\n      type: new GraphQLList(PersonType),\n      description: 'Everyone, everywhere',\n      resolve: (root, args, {loaders}) => loaders.person.loadAll(),\n    },\n    node: nodeField,\n    person: {\n      type: PersonType,\n      args: {\n        id: {type: new GraphQLNonNull(GraphQLID)},\n      },\n      resolve: (root, args, {loaders}) => loaders.person.load(args.id),\n    },\n  }),\n});\n\nexport default new GraphQLSchema({\n  query: QueryType,\n});\n"]}